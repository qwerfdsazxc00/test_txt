package cn.com.dhcc.credit.approval.service.impl;import java.lang.reflect.Field;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.persistence.Table;import org.apache.commons.collections.CollectionUtils;import org.apache.commons.lang.StringUtils;import org.redisson.api.RLock;import org.redisson.api.RMap;import org.redisson.api.RedissonClient;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Component;import cn.com.dhcc.credit.approval.ann.BasicMessage;import cn.com.dhcc.credit.approval.bean.entity.ApprOperate;import cn.com.dhcc.credit.approval.bean.entity.ApprTask;import cn.com.dhcc.credit.approval.constants.Constants;import cn.com.dhcc.credit.approval.constants.Operation;import cn.com.dhcc.credit.approval.service.OperatorDataHandleService;import cn.com.dhcc.credit.approval.service.QueryAndUpdateBasicService;import cn.com.dhcc.credit.common.utils.IdUtil;import cn.com.dhcc.credit.platform.util.Reflections;import cn.com.dhcc.credit.platform.util.redis.RedissonUtil;import cn.com.dhcc.platform.middleware.operationshistory.annotation.OperateId;import cn.com.dhcc.platform.middleware.operationshistory.container.ActionLog;import cn.com.dhcc.platform.middleware.operationshistory.container.HistoryLog;import cn.com.dhcc.platform.middleware.operationshistory.container.TargetId;import cn.com.dhcc.platform.middleware.operationshistory.operator.subject.Operator;import cn.com.dhcc.platform.middleware.operationshistory.writer.OperationsHistoryWriter;import lombok.extern.slf4j.Slf4j;/** * 注意：项目中不能开启spring 异步线程配置 审批功能：插入操作记录和审批任务到数据库 * * @author wanghaowei * @date 2020年6月19日 */@Component("OperationsHistoryWriter")@Slf4jpublic class DefaultOperationsHistoryWriter implements OperationsHistoryWriter {	private static RedissonClient redisson = RedissonUtil.getLocalRedisson();	public static final String ID_STR = "id";	public static final String AUDITING_STATE = "auditingState";	public static final String BUSS_DATE = "bussDate";	private static final String E_CONFIG_NAME = "e_config_table";	private static final String CONFIG_NAME = "config_table";	/**	 * 维护具体信息段	 */	private Map<Class<?>, String> infoMap = new HashMap<>();	@Autowired	private QueryAndUpdateBasicService queryService;	@Autowired	private OperatorDataHandleService dataHandleService;	/**	 * @param actionLog	 *	 *1.判断审批开关是否开启,在关闭的情况下,直接到6	 *2.判断当前操作类型是否包含在需要审批的操作中(通过审批细分参数),不包含时,直接到6	 *3.查询基础段信息,根据custId或bussNum查询,判断基础段的审批状态	 *4.状态为审批中时,基础段id+状态为审批中查询审批任务表,通过查询出的任务id将审批历史表中的记录逻辑删除,更新任务表审批等级 ,操作员等信息 	 *5.状态不为审批中时,修改基础段审核状态为审批中,新增审批任务表记录表记录	 *6.操作记录入库	 *	 */	@Override	public void write(ActionLog actionLog) {		log.info("DefaultOperationsHistoryWriter---write---操作记录入库---start---参数actionLog{}",actionLog.toString());		List<ApprOperate> appList = new ArrayList<ApprOperate>();		List<String> fieldList = new ArrayList<String>();		// 获取操作对应的标记(新增,修改,删除等)		String operateNameMark = Operation.mark(actionLog.getOperateName());		// 此次操作包含的修改详情		List<HistoryLog> historyLogs = actionLog.getHistoryLogs();		// 业务类型(即基本信息,借贷等)		String subjectName = actionLog.getSubjectName();		// 具体的信息段 通过class获取		Class<?> subjectClass = actionLog.getSubjectClass();		String infoSegment = info(subjectClass);		// 操作用户		Operator operator = actionLog.getOperator();		String userName = operator.getUserName();		List<TargetId> targetIds = actionLog.getTargetIds();		if(CollectionUtils.isEmpty(targetIds)){			throw new RuntimeException("此处主键集合不应为空,出现此错误时,需要查看正在操作的此段后台代码配置是否正确,当前操作段为"+infoSegment);		}		// 业务类型与具体信息段相等时,说明操作的是基础段		boolean isBasic = subjectName.equals(infoSegment);		try {			// 如果是修改操作,拼装操作记录数据时,需要将操作的字段名,新旧字段值存入			if (Constants.APPR_DETAIL_UPDATE.equals(operateNameMark)) {				// historyLogs为空时,说明业务字段数据未被修改,不需要任何操作				if (CollectionUtils.isEmpty(historyLogs)) {					log.debug("DefaultOperationsHistoryWriter---write---未发现有修改的业务字段,不进行其他操作");					return;				}				dataHandleService.assemblingOperatorData(historyLogs, actionLog, subjectName, operateNameMark, infoSegment, appList,						fieldList, userName);			} else if (Constants.APPR_DETAIL_DELETE.equals(operateNameMark)) {				// 因为删除时可以批量删除,如果不是基础段时,操作记录表需要记录多条操作				dataHandleService.assemblingOperatorDataForDelete(actionLog, subjectName, operateNameMark, infoSegment, appList, userName,						targetIds);			} else {				// 新增时				dataHandleService.assemblingOperatorDataForCreate(actionLog, subjectName, operateNameMark, infoSegment, appList,						userName);			}			log.debug("DefaultOperationsHistoryWriter---write---拼装后的操作记录结果为:{}",appList);			// 判断参数			boolean result = judgeAuditConfig(operateNameMark, subjectName);			// TRUE表示当前操作不在开启的审批范围内,仅保存操作记录即可			log.debug("DefaultOperationsHistoryWriter---write---审批开关判断结果:{},当前操作类型为:{}",result,operateNameMark);			if (result) {				dataHandleService.saveOperateData(appList, null, null);				return;			}			BasicMessage basicInfo = subjectClass.getAnnotation(BasicMessage.class);			// 判断是否删除操作			if (Constants.APPR_DETAIL_DELETE.equals(operateNameMark)) {				deleteDataHandle(isBasic, targetIds, basicInfo, subjectName, userName, appList, fieldList,						subjectClass);				return;			}			// 不是基础段删除操作时,有个数的段在批量删除时,需要多条操作记录,仅需一条审批任务,新增或修改操作,不区分段			TargetId targetId = targetIds.get(0);			// 此处value其他段时为业务号或客户号的值,基础段时为id			String value = (String) targetId.getId();			// 查询基础段数据			Object basicData = queryBasicData(value, basicInfo);			// 处理数据并入库			handleAndSaveData(basicData, subjectName, isBasic, fieldList, appList, userName);		} catch (Exception e) {			log.error("DefaultOperationsHistoryWriter---write---操作记录入库时异常{}", e);			// 异步线程,抛出运行时异常,方便页面操作同时回滚			throw new RuntimeException(e);		}	}	/**	 * 判断审批相关参数是否开启	 * 	 * @param operateName	 * @return	 * @author gsh	 * @date 2020年7月7日	 * @return boolean 注：返回值为Boolean,写明true,false含义	 */	private boolean judgeAuditConfig(String operateName, String subjectName) {		// 审批功能开关		// 判断数据类别(企业或个人)		String bussCate = subjectName.substring(0, 1);		RMap<String, String> map = null;		if (Constants.ENT_FLAG.equals(bussCate)) {			map = redisson.getMap(E_CONFIG_NAME);		} else {			map = redisson.getMap(CONFIG_NAME);		}		String auditFlag = map.get(Constants.APPR_SWITCH_STR);		// 判断审批功能是否开启,N为关闭,Y为开启		if (Constants.APPR_SWITCH_NO.equals(auditFlag)) {			// 审批开关在关闭的情况下,记录当前操作记录即可			return true;		}		// 审批功能细分参数		String auditOperate = map.get(Constants.APPR_DETAIL_STR);		if (!auditOperate.contains(operateName)) {			// 如当前操作不在需要审批的范围内,记录当前操作记录即可			return true;		};		return false;	}	/**	 * 根据主键查询基础段数据	 * 	 * @param primaryKey	 * @author gsh	 * @date 2020年7月3日	 * @return void 注：返回值为Boolean,写明true,false含义	 * @throws Exception	 */	private Object queryBasicData(String primaryKey, BasicMessage basicInfo) throws Exception {		String className = basicInfo.className();		String methodName = basicInfo.queryMethod();		Object obj = queryService.queryBasicData(className, primaryKey, methodName);		return obj;	}	/**	 * 根据基础段审核状态,进行数据处理并入库	 * 	 * @param basicData	 * @param subjectName	 * @param fieldName	 * @param value	 * @param isBasic	 * @param fieldList	 * @param appList	 * @throws Exception	 * @author gsh	 * @param userName	 * @date 2020年7月10日	 * @return void 注：返回值为Boolean,写明true,false含义	 */	private void handleAndSaveData(Object basicData, String subjectName, boolean isBasic, List<String> fieldList,			List<ApprOperate> appList, String userName) throws Exception {		String taskId = null;		String auditState = (String) Reflections.getFieldValue(basicData, AUDITING_STATE);		String dataId = (String) Reflections.getFieldValue(basicData, ID_STR);		// 审批开关在开启的情况下,先判断当前记录是否有锁,没锁时此处对记录进行加锁,通过dataId,抢不到锁时抛出异常,说明有其他人正在操作,稍后进行修改		RLock lock = redisson.getLock(dataId);		if (!lock.tryLock()) {			throw new RuntimeException("当前数据正在审批中或正在被他人修改中,请稍后再进行操作-----------------dataId" + dataId);		}		try {			// 如果基础段审核状态为审核通过,审核拒绝,无需审核,基础段审核状态为无需审核时,说明为新增数据			if (Constants.APPR_STATE_PASS.equals(auditState) || Constants.APPR_STATE_REFUSE.equals(auditState)					|| Constants.APPR_STATE_NOAUDIT.equals(auditState)) {				// 审批任务id.因操作记录表入库时需要,所以在此指定				taskId = IdUtil.genUUID();				// 创建新的审批任务并入库				dataHandleService.initApprovalTasK(subjectName, dataId, basicData, taskId, userName);			} else {				// 根据基础段id与审批状态查找taskid				List<ApprTask> taskList = dataHandleService.findTaskByDataIdAndState(dataId, auditState);				if (taskList.size() > 1) {					throw new RuntimeException("审批任务内有重复任务,无法在审批任务内增加操作记录");				} else if (taskList.size() == 1) {					// 获取此条记录的审批任务id					ApprTask oldTask = taskList.get(0);					taskId = oldTask.getTaskId();					// 如果基础段状态为审核中时,需要修改审批历史表的记录					if (Constants.APPR_STATE_PENDING.equals(auditState)) {						dataHandleService.updateApprRecord(taskId);					}					dataHandleService.updateApprTask(basicData, oldTask, fieldList, isBasic, userName);				} else {					// 列表为空时,有可能是新增					throw new RuntimeException("审批任务表内未查询到有效的审批任务---dataId" + dataId);				}			}			// 更新基础段状态为待审批			queryService.updateAuditstate(basicData);			// 操作记录入库			dataHandleService.saveOperateData(appList, taskId, dataId);		} catch (Exception e) {			log.error("DefaultOperationsHistoryWriter---write---对审批任务表相关操作时异常,auditState:{},dataId:{},taskId:{}",auditState					,dataId,taskId);			throw e;		}finally{			lock.unlock();		}	}	/**	 * 通过class对象获取具体的信息段	 * 	 * @param clazz	 *            具体信息段的class对象	 * @return	 */	private String info(Class<?> clazz) {		String info = infoMap.get(clazz);		if (StringUtils.isEmpty(info)) {			Table table = clazz.getAnnotation(Table.class);			info = table.name();			infoMap.put(clazz, info);		}		return info;	}		/**	 * 获取本段数据中的主键值,用于查找基础段	 * 	 * @param value	 * @param subjectClass	 * @param selfData	 * @return	 * @author gsh	 * @date 2020年7月16日	 * @return String 注：返回值为Boolean,写明true,false含义	 */	private String getPrimaryKeyValue(String value, Class<?> subjectClass, Object selfData) {		// 获取主键注解		Field[] fields = subjectClass.getDeclaredFields();		for (Field field : fields) {			OperateId annotation = field.getAnnotation(OperateId.class);			if (null != annotation) {				field.setAccessible(true);				String id = field.getName();				// 根据数据获取业务号或者客户号				value = (String) Reflections.getFieldValue(selfData, id);			}		}		return value;	}	/**	 * 删除操作时的数据处理 由于删除操作时仅有操作数据的id,而入库时需要业务发生日期,三标等数据,所以需要通过id去查询数据,	 * 	 * @param isBasic	 * @param targetIds	 * @param basicInfo	 * @param subjectName	 * @param userName	 * @param appList	 * @param fieldList	 * @param subjectClass	 * @throws Exception	 * @author gsh	 * @date 2020年7月17日	 * @return void 注：返回值为Boolean,写明true,false含义	 */	private void deleteDataHandle(boolean isBasic, List<TargetId> targetIds, BasicMessage basicInfo, String subjectName,			String userName, List<ApprOperate> appList, List<String> fieldList, Class<?> subjectClass)			throws Exception {		// 此处需要判断是不是基础段的删除操作,基础段在批量删除的情况下,一个基础段对应一个审批任务,需要新建多个审批任务		List<ApprOperate> operList = null;		if (null != targetIds) {			if (isBasic) {				// 如果是基础段的删除,遍历获取数据id,通过id查询本条数据				for (int i = 0; i < targetIds.size(); i++) {					TargetId targetId = targetIds.get(i);					String value = (String) targetId.getId();					// 查询基础段数据					Object basicData = queryBasicData(value, basicInfo);					// 处理数据并入库					ApprOperate apprOperate = appList.get(i);					// 更新数据的业务发生日期字段					Date bussDate = (Date) Reflections.getFieldValue(basicData, BUSS_DATE);					bussDate = dataHandleService.bussDateFormat(bussDate);					apprOperate.setBussDate(bussDate);					log.debug("DefaultOperationsHistoryWriter---deleteDataHandle---删除基础段时拼装数据:{}",apprOperate.toString());					operList = new ArrayList<ApprOperate>();					operList.add(apprOperate);					handleAndSaveData(basicData, subjectName, isBasic, fieldList, operList, userName);					operList = null;				}			} else {				// 不是基础段删除操作时,有个数的段在批量删除时,需要多条操作记录,仅需一条审批任务,所以只需要取其中一条数据的id				String value = "";				Object selfData = null;				// TODO 能否一次性查出所有数据,不用单条查询				for (int i = 0; i < targetIds.size(); i++) {					TargetId targetId = targetIds.get(i);					// 获取id值					value = (String) targetId.getId();					// 删除时,仅有本段数据id,根据id查找业务表数据					selfData = dataHandleService.findSelfData(value, subjectClass);					// 获取业务发生日期					Date bussDate = (Date) Reflections.getFieldValue(selfData, BUSS_DATE);					appList.get(i).setBussDate(bussDate);				}				log.debug("DefaultOperationsHistoryWriter---deleteDataHandle---删除有个数段时拼装数据:{}",appList);				// 获取主键值,用于查找基础段				value = getPrimaryKeyValue(value, subjectClass, selfData);				// 查询基础段数据				Object basicData = queryBasicData(value, basicInfo);				// 处理数据并入库				handleAndSaveData(basicData, subjectName, isBasic, fieldList, appList, userName);			}		} 	}}